1.1)
1. cp assign1.html exer1.html
   cp assign1.html exer2.html
   cp assign1.html exer3.html

answer: e m a c s SP e x e r 1. h t m l Enter

2.C-s Enter A S C I I Enter
3.C-s Enter I n s t r u c t i o n s Enter
4.C-s Enter H T M L Enter M-4 C-b
5.C-s Enter h u n t Enter M-4 C-b
6.C-e
7.C-a
8.Esc <
9.No I have not been using the arrow keys.
10.Parts 1-8 use commands available in Emacs
11.C-x C-c

1.2)
1.e m a c s SP e x e r 2 . h t m l Enter
2.C-s < ! - Enter C-a C-k
3.C-s D E Enter C-a C-k
4.C-s < h t Enter C-a C-k C-p C-k C-n C-n C-k
5.C-s < ! Enter C-b C-b M-7 C-d
C-x C-c
diff -u exer1.html exer2.html >exer2.diff

1.3)
1. e m a c s SP e x e r 3 . h t m l Enter
2. C-s A s s i g n m e n t Enter C-f C-d 3 7 C-s 1 .
Enter C-b C-b C-d 3 7
3. C-s U T Enter C-d C-b C-d S C-f C-d A S C I I
4. Esc < C-s < o Enter C-e Enter
diff -u exer1.html exer3.html >exer3.diff

1.4)
1. c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f
SP > e x e r 4 . h t m l
2. e m a c s SP e x e r 4 . h t m l Enter
3. M-> M-v C-s < ! Enter M-2 C-b C-@ M-7 C-f M-w
M-< C-s l o g SP l Enter M-4 C-f C-y
4.M-> M-v C-p C-p C-@ M-110 C-f M-w
M-< C-s > S Enter C-n C-n C-y M-3 C-n
DEL DEL DEL C-p C-d C-p C-d C-p C-d

M-> M-v M-v C-s D E Enter M-7 C-b C-@ M-35 C-f
M-w M-< C-s c s < Enter C-n C-n C-y

M-> M-v M-v M-3 C-p C-@ M-120 C-f M-w
M-< C-s n t < Enter C-n C-n C-y M-3 C-p
C-d M-3 C-n DEL
5. M-< C-s - - - SP e Enter M-5 C-b C-@
M-> C-w
6.C-x u
7.M-< C-s - - - SP e Enter M-5 C-b
< ! - - SP M-> - - >
8.I found that there are exactly 7
instances of <ol>
M-%
< o l > Enter <Ol> Enter
!
9.diff -u exer1.html exer4.html >exer4.diff

1.5)
1. M-x make-directory Enter j u n k
2. c-x c-f hello.c
I then typed in the text as shown in the project spec
3.M-x c o m p i l e Enter
Delete Delete Delete Delete
Delete Delete Delete Delete
g + + SP - o SP a . o u t SP h e l l o . c Enter
C-x 1
4.M-! . / a . o u t SP > SP h e l l o - o u t Enter
C-x C-f
h e l l o - o u t

5. the resulting buffer's contents were exactly as follows:
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c
  char n = '%cn';%c
  char b = '%c%c';%c char q = '%c';%c
  char const *p = %c%s%c;%c printf (p, n, n, n, n, b, n, b,
  b, n, q, n, q, p, q, n, n, n, n);%c return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

1.6)
1. C-x b Enter
e v a l - p r i n t - l a s t - s e x p ( r a n d o m )
C-j
( s e t q SP x SP ( r a n d o m ) )
C-j
( s e t q SP y SP ( r a n d o m ) )
C-j
( s e t q SP z SP ( r a n d o m ) )
C-j
( * SP x SP y SP z )
my three variables x y z were all positive but their
product was negative. Thus, the product is incorrect
possibly as a result of an overflow.
C-j
M-: ( * SP x SP y SP z )
this yields three different notations for the same
number including octal and hex format.
The three integers are not truly random.
In the emacs manual in the random page, it says
that this can be used as random, but it goes through
a routine list of numbers.
